Dockerfile

# Use the official Golang image as the builder
FROM golang:1.23-alpine AS builder

# Set the Current Working Directory inside the container
WORKDIR /app

# Copy the Go source code
COPY . .

# Download Go modules (if any)
RUN go mod init my-go-app && go mod tidy

# Build the Go application
RUN go build -o my-go-app

# Use a minimal base image to reduce the final image size
FROM alpine:latest

# Set the working directory
WORKDIR /root/

# Copy the built Go binary from the builder stage
COPY --from=builder /app/my-go-app .

# Expose port if needed (optional)
//EXPOSE 8080

# Command to run the executable
CMD ["./my-go-app"]


Docker commands
//docker build -t <file_name> .
//docker run -it -p 8080:8081 <file_name>    //container run until the session is running in bash
//docker run -d -p 8080:8081 <file_name>     //container run in background independently until we want
//docker ps 				   // to see all cotainers running in the machine
//docker kill <CONTAINER_ID>		   // to stop running container execution
